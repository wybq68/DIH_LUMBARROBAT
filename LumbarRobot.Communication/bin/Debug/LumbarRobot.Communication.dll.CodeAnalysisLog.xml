<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="d:\program files (x86)\microsoft visual studio 14.0\team tools\static analysis tools\fxcop\Xml\CodeAnalysisReport.xsl"?>
<FxCopReport Version="14.0">
 <Targets>
  <Target Name="C:\Users\bin\Documents\腰椎\LumbarRobot\LumbarRobot.Communication\bin\Debug\LumbarRobot.Communication.dll">
   <Modules>
    <Module Name="lumbarrobot.communication.dll">
     <Namespaces>
      <Namespace Name="LumbarRobot.Communication">
       <Types>
        <Type Name="CanDataCommunication" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#LumbarRobot.Communication.IDataCommunication.Close()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2015-11-18 07:16:33Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Users\bin\Documents\腰椎\LumbarRobot\LumbarRobot.Communication" File="CanDataCommunication.cs" Line="99">将 'CanDataCommunication' 设置为密封(如果以前提供过此类，则为重大更改)，非显式实现该方法，或实现一个公开 'IDataCommunication.Close()' 的功能且对派生类可见的新方法。</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LumbarRobot.Communication.IDataCommunication.Open()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2015-11-18 07:16:33Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Users\bin\Documents\腰椎\LumbarRobot\LumbarRobot.Communication" File="CanDataCommunication.cs" Line="44">将 'CanDataCommunication' 设置为密封(如果以前提供过此类，则为重大更改)，非显式实现该方法，或实现一个公开 'IDataCommunication.Open()' 的功能且对派生类可见的新方法。</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LumbarRobot.Communication.IDataCommunication.SendData(System.Byte[])" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2015-11-18 07:16:33Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Users\bin\Documents\腰椎\LumbarRobot\LumbarRobot.Communication" File="CanDataCommunication.cs" Line="112">将 'CanDataCommunication' 设置为密封(如果以前提供过此类，则为重大更改)，非显式实现该方法，或实现一个公开 'IDataCommunication.SendData(byte[])' 的功能且对派生类可见的新方法。</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#VCI_ClearBuffer(System.UInt32,System.UInt32,System.UInt32)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2015-11-18 07:16:33Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">由于是 P/Invoke 方法，因此，应在名为 NativeMethods、SafeNativeMethods 或 UnsafeNativeMethods 的类中定义 'CanDataCommunication.VCI_ClearBuffer(uint, uint, uint)'。</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#VCI_CloseDevice(System.UInt32,System.UInt32)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2015-11-18 07:16:33Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">由于是 P/Invoke 方法，因此，应在名为 NativeMethods、SafeNativeMethods 或 UnsafeNativeMethods 的类中定义 'CanDataCommunication.VCI_CloseDevice(uint, uint)'。</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#VCI_GetReceiveNum(System.UInt32,System.UInt32,System.UInt32)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2015-11-18 07:16:33Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">由于是 P/Invoke 方法，因此，应在名为 NativeMethods、SafeNativeMethods 或 UnsafeNativeMethods 的类中定义 'CanDataCommunication.VCI_GetReceiveNum(uint, uint, uint)'。</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#VCI_GetReference(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.IntPtr)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2015-11-18 07:16:33Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">由于是 P/Invoke 方法，因此，应在名为 NativeMethods、SafeNativeMethods 或 UnsafeNativeMethods 的类中定义 'CanDataCommunication.VCI_GetReference(uint, uint, uint, uint, IntPtr)'。</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#VCI_InitCAN(System.UInt32,System.UInt32,System.UInt32,LumbarRobot.Communication.CanDataCommunication+VCI_INIT_CONFIG&amp;)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2015-11-18 07:16:33Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">由于是 P/Invoke 方法，因此，应在名为 NativeMethods、SafeNativeMethods 或 UnsafeNativeMethods 的类中定义 'CanDataCommunication.VCI_InitCAN(uint, uint, uint, ref CanDataCommunication.VCI_INIT_CONFIG)'。</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#VCI_OpenDevice(System.UInt32,System.UInt32,System.UInt32)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2015-11-18 07:16:33Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">由于是 P/Invoke 方法，因此，应在名为 NativeMethods、SafeNativeMethods 或 UnsafeNativeMethods 的类中定义 'CanDataCommunication.VCI_OpenDevice(uint, uint, uint)'。</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#VCI_ReadBoardInfo(System.UInt32,System.UInt32,LumbarRobot.Communication.CanDataCommunication+VCI_BOARD_INFO&amp;)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2015-11-18 07:16:33Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">由于是 P/Invoke 方法，因此，应在名为 NativeMethods、SafeNativeMethods 或 UnsafeNativeMethods 的类中定义 'CanDataCommunication.VCI_ReadBoardInfo(uint, uint, ref CanDataCommunication.VCI_BOARD_INFO)'。</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#VCI_ReadCANStatus(System.UInt32,System.UInt32,System.UInt32,LumbarRobot.Communication.CanDataCommunication+VCI_CAN_STATUS&amp;)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2015-11-18 07:16:33Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">由于是 P/Invoke 方法，因此，应在名为 NativeMethods、SafeNativeMethods 或 UnsafeNativeMethods 的类中定义 'CanDataCommunication.VCI_ReadCANStatus(uint, uint, uint, ref CanDataCommunication.VCI_CAN_STATUS)'。</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#VCI_ReadErrInfo(System.UInt32,System.UInt32,System.UInt32,LumbarRobot.Communication.CanDataCommunication+VCI_ERR_INFO&amp;)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2015-11-18 07:16:33Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">由于是 P/Invoke 方法，因此，应在名为 NativeMethods、SafeNativeMethods 或 UnsafeNativeMethods 的类中定义 'CanDataCommunication.VCI_ReadErrInfo(uint, uint, uint, ref CanDataCommunication.VCI_ERR_INFO)'。</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#VCI_Receive(System.UInt32,System.UInt32,System.UInt32,LumbarRobot.Communication.CanDataCommunication+VCI_CAN_OBJ&amp;,System.UInt32,System.Int32)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2015-11-18 07:16:33Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">由于是 P/Invoke 方法，因此，应在名为 NativeMethods、SafeNativeMethods 或 UnsafeNativeMethods 的类中定义 'CanDataCommunication.VCI_Receive(uint, uint, uint, ref CanDataCommunication.VCI_CAN_OBJ, uint, int)'。</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#VCI_ResetCAN(System.UInt32,System.UInt32,System.UInt32)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2015-11-18 07:16:33Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">由于是 P/Invoke 方法，因此，应在名为 NativeMethods、SafeNativeMethods 或 UnsafeNativeMethods 的类中定义 'CanDataCommunication.VCI_ResetCAN(uint, uint, uint)'。</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#VCI_SetReference(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.IntPtr)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2015-11-18 07:16:33Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">由于是 P/Invoke 方法，因此，应在名为 NativeMethods、SafeNativeMethods 或 UnsafeNativeMethods 的类中定义 'CanDataCommunication.VCI_SetReference(uint, uint, uint, uint, IntPtr)'。</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#VCI_StartCAN(System.UInt32,System.UInt32,System.UInt32)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2015-11-18 07:16:33Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">由于是 P/Invoke 方法，因此，应在名为 NativeMethods、SafeNativeMethods 或 UnsafeNativeMethods 的类中定义 'CanDataCommunication.VCI_StartCAN(uint, uint, uint)'。</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#VCI_Transmit(System.UInt32,System.UInt32,System.UInt32,LumbarRobot.Communication.CanDataCommunication+VCI_CAN_OBJ&amp;,System.UInt32)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2015-11-18 07:16:33Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">由于是 P/Invoke 方法，因此，应在名为 NativeMethods、SafeNativeMethods 或 UnsafeNativeMethods 的类中定义 'CanDataCommunication.VCI_Transmit(uint, uint, uint, ref CanDataCommunication.VCI_CAN_OBJ, uint)'。</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="CanNetDataCommunication" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#LumbarRobot.Communication.IDataCommunication.Close()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2015-11-18 07:16:33Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Users\bin\Documents\腰椎\LumbarRobot\LumbarRobot.Communication" File="CanNetDataCommunication.cs" Line="142">将 'CanNetDataCommunication' 设置为密封(如果以前提供过此类，则为重大更改)，非显式实现该方法，或实现一个公开 'IDataCommunication.Close()' 的功能且对派生类可见的新方法。</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LumbarRobot.Communication.IDataCommunication.Open()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2015-11-18 07:16:33Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Users\bin\Documents\腰椎\LumbarRobot\LumbarRobot.Communication" File="CanNetDataCommunication.cs" Line="59">将 'CanNetDataCommunication' 设置为密封(如果以前提供过此类，则为重大更改)，非显式实现该方法，或实现一个公开 'IDataCommunication.Open()' 的功能且对派生类可见的新方法。</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LumbarRobot.Communication.IDataCommunication.SendData(System.Byte[])" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2015-11-18 07:16:33Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Users\bin\Documents\腰椎\LumbarRobot\LumbarRobot.Communication" File="CanNetDataCommunication.cs" Line="155">将 'CanNetDataCommunication' 设置为密封(如果以前提供过此类，则为重大更改)，非显式实现该方法，或实现一个公开 'IDataCommunication.SendData(byte[])' 的功能且对派生类可见的新方法。</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#VCI_ClearBuffer(System.UInt32,System.UInt32,System.UInt32)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2015-11-18 07:16:33Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">由于是 P/Invoke 方法，因此，应在名为 NativeMethods、SafeNativeMethods 或 UnsafeNativeMethods 的类中定义 'CanNetDataCommunication.VCI_ClearBuffer(uint, uint, uint)'。</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#VCI_CloseDevice(System.UInt32,System.UInt32)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2015-11-18 07:16:33Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">由于是 P/Invoke 方法，因此，应在名为 NativeMethods、SafeNativeMethods 或 UnsafeNativeMethods 的类中定义 'CanNetDataCommunication.VCI_CloseDevice(uint, uint)'。</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#VCI_GetReceiveNum(System.UInt32,System.UInt32,System.UInt32)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2015-11-18 07:16:33Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">由于是 P/Invoke 方法，因此，应在名为 NativeMethods、SafeNativeMethods 或 UnsafeNativeMethods 的类中定义 'CanNetDataCommunication.VCI_GetReceiveNum(uint, uint, uint)'。</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#VCI_GetReference(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.IntPtr)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2015-11-18 07:16:33Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">由于是 P/Invoke 方法，因此，应在名为 NativeMethods、SafeNativeMethods 或 UnsafeNativeMethods 的类中定义 'CanNetDataCommunication.VCI_GetReference(uint, uint, uint, uint, IntPtr)'。</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#VCI_InitCAN(System.UInt32,System.UInt32,System.UInt32,LumbarRobot.Communication.CanNetDataCommunication+VCI_INIT_CONFIG&amp;)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2015-11-18 07:16:33Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">由于是 P/Invoke 方法，因此，应在名为 NativeMethods、SafeNativeMethods 或 UnsafeNativeMethods 的类中定义 'CanNetDataCommunication.VCI_InitCAN(uint, uint, uint, ref CanNetDataCommunication.VCI_INIT_CONFIG)'。</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#VCI_OpenDevice(System.UInt32,System.UInt32,System.UInt32)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2015-11-18 07:16:33Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">由于是 P/Invoke 方法，因此，应在名为 NativeMethods、SafeNativeMethods 或 UnsafeNativeMethods 的类中定义 'CanNetDataCommunication.VCI_OpenDevice(uint, uint, uint)'。</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#VCI_ReadBoardInfo(System.UInt32,System.UInt32,LumbarRobot.Communication.CanNetDataCommunication+VCI_BOARD_INFO&amp;)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2015-11-18 07:16:33Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">由于是 P/Invoke 方法，因此，应在名为 NativeMethods、SafeNativeMethods 或 UnsafeNativeMethods 的类中定义 'CanNetDataCommunication.VCI_ReadBoardInfo(uint, uint, ref CanNetDataCommunication.VCI_BOARD_INFO)'。</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#VCI_ReadCANStatus(System.UInt32,System.UInt32,System.UInt32,LumbarRobot.Communication.CanNetDataCommunication+VCI_CAN_STATUS&amp;)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2015-11-18 07:16:33Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">由于是 P/Invoke 方法，因此，应在名为 NativeMethods、SafeNativeMethods 或 UnsafeNativeMethods 的类中定义 'CanNetDataCommunication.VCI_ReadCANStatus(uint, uint, uint, ref CanNetDataCommunication.VCI_CAN_STATUS)'。</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#VCI_ReadErrInfo(System.UInt32,System.UInt32,System.UInt32,LumbarRobot.Communication.CanNetDataCommunication+VCI_ERR_INFO&amp;)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2015-11-18 07:16:33Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">由于是 P/Invoke 方法，因此，应在名为 NativeMethods、SafeNativeMethods 或 UnsafeNativeMethods 的类中定义 'CanNetDataCommunication.VCI_ReadErrInfo(uint, uint, uint, ref CanNetDataCommunication.VCI_ERR_INFO)'。</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#VCI_Receive(System.UInt32,System.UInt32,System.UInt32,LumbarRobot.Communication.CanNetDataCommunication+VCI_CAN_OBJ&amp;,System.UInt32,System.Int32)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2015-11-18 07:16:33Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">由于是 P/Invoke 方法，因此，应在名为 NativeMethods、SafeNativeMethods 或 UnsafeNativeMethods 的类中定义 'CanNetDataCommunication.VCI_Receive(uint, uint, uint, ref CanNetDataCommunication.VCI_CAN_OBJ, uint, int)'。</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#VCI_ResetCAN(System.UInt32,System.UInt32,System.UInt32)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2015-11-18 07:16:33Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">由于是 P/Invoke 方法，因此，应在名为 NativeMethods、SafeNativeMethods 或 UnsafeNativeMethods 的类中定义 'CanNetDataCommunication.VCI_ResetCAN(uint, uint, uint)'。</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#VCI_SetReference(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.IntPtr)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2015-11-18 07:16:33Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">由于是 P/Invoke 方法，因此，应在名为 NativeMethods、SafeNativeMethods 或 UnsafeNativeMethods 的类中定义 'CanNetDataCommunication.VCI_SetReference(uint, uint, uint, uint, IntPtr)'。</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#VCI_StartCAN(System.UInt32,System.UInt32,System.UInt32)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2015-11-18 07:16:33Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">由于是 P/Invoke 方法，因此，应在名为 NativeMethods、SafeNativeMethods 或 UnsafeNativeMethods 的类中定义 'CanNetDataCommunication.VCI_StartCAN(uint, uint, uint)'。</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#VCI_Transmit(System.UInt32,System.UInt32,System.UInt32,LumbarRobot.Communication.CanNetDataCommunication+VCI_CAN_OBJ&amp;,System.UInt32)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2015-11-18 07:16:33Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">由于是 P/Invoke 方法，因此，应在名为 NativeMethods、SafeNativeMethods 或 UnsafeNativeMethods 的类中定义 'CanNetDataCommunication.VCI_Transmit(uint, uint, uint, ref CanNetDataCommunication.VCI_CAN_OBJ, uint)'。</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="IDataCommunication" Kind="Interface" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#DataReceived" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2015-11-18 07:16:33Z" FixCategory="Breaking">
             <Issue Name="First" Certainty="95" Level="Error">将 'DataRecievedHandler' 的第一个参数声明为一个名为“sender”的对象。</Issue>
             <Issue Name="Second" Certainty="95" Level="Error">将 'DataRecievedHandler' 的第二个参数声明为 EventArgs，或者声明为扩展 EventArgs 的类型的名为“e”的实例。</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LogEvent" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2015-11-18 07:16:33Z" FixCategory="Breaking">
             <Issue Name="First" Certainty="95" Level="Error">将 'LogEventHandler' 的第一个参数声明为一个名为“sender”的对象。</Issue>
             <Issue Name="Second" Certainty="95" Level="Error">将 'LogEventHandler' 的第二个参数声明为 EventArgs，或者声明为扩展 EventArgs 的类型的名为“e”的实例。</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
 </Targets>
 <Rules>
  <Rule TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009">
   <Name>正确声明事件处理程序</Name>
   <Description>按照约定，.NET 事件有两个参数，分别用于指定事件发送方和事件数据。事件处理程序签名应遵循以下形式: void MyEventHandler(object sender, EventArgs e)。“sender”参数的类型始终是 System.Object，即使该参数可能使用更具体的类型。“e”参数的类型始终是 System.EventArgs。不提供事件数据的事件应使用 System.EventHandler 委托类型。事件处理程序返回 void 以便将每个事件发送给多个目标方法。目标返回的任何值在第一次调用之后将会丢失。</Description>
   <Resolution Name="First">将 {0} 的第一个参数声明为一个名为“sender”的对象。</Resolution>
   <Resolution Name="Second">将 {0} 的第二个参数声明为 EventArgs，或者声明为扩展 EventArgs 的类型的名为“e”的实例。</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182133.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="designrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033">
   <Name>接口方法应可由子类型调用</Name>
   <Description>定义的显式方法实现具有私有可访问性。除非基类提供了具有相应可访问性的备用方法，否则从具有显式方法实现的类派生，并选择在类中重新声明它们的类不能调入基类实现。如果重写的基类方法已被显式接口实现所隐藏，则为了调入基类实现，派生类必须将基指针强制转换为相关接口。但是，通过此引用调用基类实现时，实际调用的将是派生类实现，这会导致递归调用，并最终导致堆栈溢出。</Description>
   <Resolution Name="Default">将 {0} 设置为密封(如果以前提供过此类，则为重大更改)，非显式实现该方法，或实现一个公开 {1} 的功能且对派生类可见的新方法。</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182153.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="designrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060">
   <Name>将 P/Invoke 移动到 NativeMethods 类</Name>
   <Description>此类型包含具有 DllImport 特性的成员。具有 DllImport 特性的成员应包含在名为 NativeMethods、SafeNativeMethods 或 UnsafeNativeMethods 的类中。</Description>
   <Resolution Name="Default">由于是 P/Invoke 方法，因此，应在名为 NativeMethods、SafeNativeMethods 或 UnsafeNativeMethods 的类中定义 {0}。</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182161.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalWarning</MessageLevel>
   <File Name="designrules.dll" Version="14.0.0.0" />
  </Rule>
 </Rules>
 <Localized>
  <String Key="Category">类别</String>
  <String Key="Certainty">确定性</String>
  <String Key="CollapseAll">全部折叠</String>
  <String Key="CheckId">检查 ID</String>
  <String Key="Error">错误</String>
  <String Key="Errors">错误</String>
  <String Key="ExpandAll">全部展开</String>
  <String Key="Help">帮助</String>
  <String Key="Line">行</String>
  <String Key="Messages">消息</String>
  <String Key="LocationNotStoredInPdb">[位置未存储在 Pdb 中]</String>
  <String Key="Project">项目</String>
  <String Key="Resolution">解析</String>
  <String Key="Rule">规则</String>
  <String Key="RuleFile">规则文件</String>
  <String Key="RuleDescription">规则说明</String>
  <String Key="Source">源</String>
  <String Key="Status">状态</String>
  <String Key="Target">目标</String>
  <String Key="Warning">警告</String>
  <String Key="Warnings">警告</String>
  <String Key="ReportTitle">代码分析报告</String>
 </Localized>
</FxCopReport>
